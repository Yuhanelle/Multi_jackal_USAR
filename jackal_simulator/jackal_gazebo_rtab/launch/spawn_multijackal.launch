<launch>
    <arg name="robot_namespace" default="jackal0"/>
    <!-- Generate the tf_prefix from the namespace -->
    <arg name="tfpre" default="$(arg robot_namespace)" />

    <!-- Put value on the parameter server in the group's namespace -->
    <param name="tf_prefix" value="$(arg robot_namespace)" />
    <arg name="x" default="0.0"/>
    <arg name="y" default="0.0"/>    <arg name="z" default="1" />
    <arg name="yaw" default="0.0"/>
    <arg name="config" default="base" />
    <arg name="kinect_enabled" default="false"/>
    <arg name="joystick" default="true" />


    <arg name="env_runner" value="$(eval 'env_run' if not optenv('OS', 'unknown').lower().startswith('windows') else 'env_run.bat')" />
    <!-- the following seems to work too when in devel space, but not in install_isolated -->
    <!-- <arg name="env_runner" value="env_run" /> -->

    <param name="robot_description"
            command="$(find jackal_description_rtab)/scripts/$(arg env_runner)
                    $(find jackal_description_rtab)/urdf/configs/$(arg config)
                    $(find xacro)/xacro $(find jackal_description_rtab)/urdf/multi_jackal.urdf.xacro
                    --inorder
                    namespace:=$(arg robot_namespace)
                    tfpre:=$(arg tfpre)"
                    />

    <!-- Spawn Jackal -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
	      args="-unpause -urdf -model $(arg robot_namespace) -param robot_description -x $(arg x) -y $(arg y) -z $(arg z) -R 0 -P 0 -Y $(arg yaw)" />

    <!-- Start the state publisher node in the namespace - uses the 
       joint states from gazebo
       along with the URDF model (robot_description) to publish 
       the joint positions to /tf --> 
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
        <param name="publish_frequency" type="double" value="50.0"/>
        <param name="use_tf_static" type="bool" value="false" />
        <param name="tf_prefix" value="$(arg tfpre)"/>
    </node>


    <!-- Here we spawn (load and launch) two controllers which become 
       part of Gazebo. The key thing we need to do is to set the 
       "base_frame_id" of the diff_drive_controller
       to include the tf_pre so that our tf trees work out.   
       So, we load the default control configuration and then overwrite 
       the base_frame_id -->
    <!-- Load controller configuration -->
    <!-- <rosparam command="load" file="$(find jackal_control_rtab)/config/control.yaml" />
    <rosparam param="jackal_velocity_controller/base_frame_id" subst_value="True">$(arg tfpre)/base_link</rosparam> -->
    <!-- Spawn controllers -->
    <!-- <node name="base_controller_spawner" pkg="controller_manager" type="spawner" 
         args="jackal_joint_publisher jackal_velocity_controller"/> -->

    <rosparam command="load" 
            file="$(find multi_jackal_control)/config/jackal_control_config.yaml" 
    />
    <param name="$(arg robot_namespace)/jackal_velocity_controller/odom_frame_id" value="$(arg robot_namespace)/odom"/>
    <param name="$(arg robot_namespace)/jackal_velocity_controller/base_frame_id" value="$(arg robot_namespace)/base_link"/>
  
    <!-- Spawn the jackal controls. -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner"
        args="jackal_joint_publisher jackal_velocity_controller">
    </node>


    <!-- Start EKF for localization -->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
        <rosparam command="load" file="$(find jackal_control_rtab)/config/local_ekf.yaml" />
        <rosparam param="base_link_frame" subst_value="true">$(arg robot_namespace)/base_link</rosparam>
        <!-- <param name="map_frame"       value="map"/>
        <param name="odom_frame"      value="$(arg robot_namespace)/odom"/>
        <param name="base_link_frame" value="$(arg robot_namespace)/base_link"/>
        <param name="world_frame"     value="$(arg robot_namespace)/odom"/>
        <remap from="odometry/filtered" to="odometry/local_filtered"/> -->
    </node>

    <node pkg="tf" type="static_transform_publisher" name="map_odom_broadcaster" args="$(arg x) $(arg y) 0 $(arg yaw) 0 0 $(arg tfpre)/map $(arg tfpre)/odom 100" />


    <!-- Twist mux is a node from Clearpath that mixes control commands from multiple sources -->
    <node pkg="twist_mux" type="twist_mux" name="twist_mux">
        <rosparam command="load" file="$(find jackal_control)/config/twist_mux.yaml" />
        <remap from="cmd_vel_out" to="jackal_velocity_controller/cmd_vel"/>
    </node>

    <include file="$(find jackal_control_rtab)/launch/teleop.launch">
        <arg name="joystick" value="$(arg joystick)" />
    </include>


</launch>
